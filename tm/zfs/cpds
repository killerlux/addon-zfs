#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2015, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# mvds host:remote_system_ds/disk.i fe:SOURCE
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host

SRC=$1
DST=$2
SNAP_ID=$3
VM_ID=$4
DS_ID=$5

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../datastore/zfs/zfs.conf

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------

SRC_HOST=`arg_host $SRC`
SRC_PATH=`arg_path $SRC`

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(echo "$SRC_PATH" | $AWK -F. '{print $NF}')

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VM_ID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE)

IMAGE_SRC="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"

IMAGE_PATH=`arg_path $IMAGE_SRC`
DST_PATH=`arg_path $DST`

# Writable Snapshot option
IMAGE_ID=$(echo ${IMAGE_SRC} | awk -F '-' '{ print $2 }')
unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(oneimage show -x $IMAGE_ID| $XPATH \
		/IMAGE/TEMPLATE/WRITABLE_SNAPSHOT)

WRITABLE_SNAPSHOT="${XPATH_ELEMENTS[j++]}"

if [ -z "${WRITABLE_SNAPSHOT}" ]; then
	WRITABLE_SNAPSHOT="FALSE"
else
	WRITABLE_SNAPSHOT=$(echo ${WRITABLE_SNAPSHOT} | awk '{print toupper($0)}')
fi

if [ "$SNAP_ID" == "-1 "]; then
    # Save-As from image
    SNAPSHOT_NAME="${VM_ID}-${DISK_ID}-CLONE"
else
    # Save-As from snapshot
    SNAPSHOT_NAME="one-snapshot-${SNAP_ID}"
fi

if [ "$CLONE" = "NO" ]; then
    CLONE_PATH="${IMAGE_PATH}"
else
    CLONE_PATH="${IMAGE_PATH}-${VM_ID}-${DISK_ID}"
fi

#-------------------------------------------------------------------------------
# Copy Image back to the datastore
#-------------------------------------------------------------------------------

log "Dumping $SRC to $DST"

if [ "${WRITABLE_SNAPSHOT}" == "TRUE" ]; then
    DUMP_CMD=$("set -e && $SUDO $ZFS_CMD clone ${CLONE_PATH}@${SNAPSHOT_NAME} ${DST_PATH}")
else
    DUMP_CMD=$(cat <<EOF
        set -e

        # Save-As from image
        if [ "$SNAP_ID" == "-1" ]; then
            $SUDO $ZFS_CMD snapshot ${CLONE_PATH}@${SNAPSHOT_NAME}
            $SUDO $ZFS_CMD send -R ${CLONE_PATH}@${SNAPSHOT_NAME} | $SUDO $ZFS_CMD recv -F ${DST_PATH}
            $SUDO $ZFS_CMD destroy ${CLONE_PATH}@${SNAPSHOT_NAME}
        
        # Save-As from snapshot
        else
            $SUDO $ZFS_CMD send -R ${CLONE_PATH}@${SNAPSHOT_NAME} | $SUDO $ZFS_CMD recv -F ${DST_PATH}
        fi

        # Remove snapshots on clone
        RES=$($SUDO $ZFS_CMD list -H -o name -t snapshot -r ${DST_PATH} | wc -l )
        if [ "$RES" != "0" ]; then
            $SUDO $ZFS_CMD list -H -o name -t snapshot -r ${DST_PATH} | xargs -n1 $SUDO zfs destroy
        fi
EOF
)
fi

ssh_exec_and_log "$SRC_HOST" "$DUMP_CMD" \
                 "Error cloning $SRC_HOST:$CLONE_PATH to $DST"

exit 0